#!/usr/bin/python
import sys,argparse, requests, json, ast

#Get the variant based on the identifier (digest)
def fetch_variant(identifier):
	
	return identifier

#Connect to the VEP annotation tool
def VEP(variant):
	server = "https://rest.ensembl.org"
	ext = "/vep/human/hgvs/" + variant
	
	r = requests.get(server+ext, headers = {"Content-Type" : "application/json"})

	if not r.ok:
		r.raise_for_status()
		sys.exit()

	decoded = r.json()
	decoded = ast.literal_eval(repr(decoded))
	return json.dumps(decoded)
	
#Parse output from VEP json
def parse_VEP_json(vep_json):
	with open("output", "w") as out:
		j = json.loads(vep_json)		
		print "json loaded"

		for field in j:
			if field["transcript_consequences"]:
				for consequence in field["transcript_consequences"]:
					out.write(
						"Gene_symbol: " + consequence["gene_symbol"] +
						"\nBiotype: " + consequence["biotype"] + 
						"\nConsequence_terms: " + consequence["consequence_terms"][0] + 
						"\nImpact: " + consequence["impact"] + "\n\n") 

def main(args):
	sys.stderr.write("Gathering annotations for: " + args.identifier + "\n")
	variant = fetch_variant(args.identifier)

	parse_VEP_json(VEP(variant))	

if __name__ == "__main__":
	parser = argparse.ArgumentParser(
		description = "Gathers annotation information for a VMC standard variant")
	parser.add_argument( 'identifier',
		type = str,
		help = "Identifier should be the digest of a VMC standard variant"
		)
	args = parser.parse_args()

	main(args)	
